/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

// clang-format off

VkResult GfrContext::PreEndCommandBuffer(VkCommandBuffer commandBuffer)
{
  return gfr::GetGfrCommandBuffer(commandBuffer)->PreEndCommandBuffer(commandBuffer);
}

VkResult GfrContext::PostEndCommandBuffer(VkCommandBuffer commandBuffer, VkResult result)
{
  return gfr::GetGfrCommandBuffer(commandBuffer)->PostEndCommandBuffer(commandBuffer, result);
}

void GfrContext::PreCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

void GfrContext::PostCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

void GfrContext::PreCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

void GfrContext::PostCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

void GfrContext::PreCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PostCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PreCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

void GfrContext::PostCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

void GfrContext::PreCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PostCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PreCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

void GfrContext::PostCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

void GfrContext::PreCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

void GfrContext::PostCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

void GfrContext::PreCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

void GfrContext::PostCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

void GfrContext::PreCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

void GfrContext::PostCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

void GfrContext::PreCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

void GfrContext::PostCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

void GfrContext::PreCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

void GfrContext::PostCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

void GfrContext::PreCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PostCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void GfrContext::PreCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

void GfrContext::PostCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

void GfrContext::PreCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

void GfrContext::PostCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

void GfrContext::PreCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

void GfrContext::PostCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

void GfrContext::PreCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

void GfrContext::PostCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

void GfrContext::PreCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

void GfrContext::PostCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

void GfrContext::PreCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

void GfrContext::PostCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

void GfrContext::PreCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void GfrContext::PostCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void GfrContext::PreCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void GfrContext::PostCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void GfrContext::PreCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PostCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PreCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDispatchIndirect(commandBuffer, buffer, offset);
}

void GfrContext::PostCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDispatchIndirect(commandBuffer, buffer, offset);
}

void GfrContext::PreCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

void GfrContext::PostCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

void GfrContext::PreCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

void GfrContext::PostCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

void GfrContext::PreCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetLineWidth(commandBuffer, lineWidth);
}

void GfrContext::PostCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetLineWidth(commandBuffer, lineWidth);
}

void GfrContext::PreCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

void GfrContext::PostCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

void GfrContext::PreCmdSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants[4])
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetBlendConstants(commandBuffer, blendConstants);
}

void GfrContext::PostCmdSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants[4])
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetBlendConstants(commandBuffer, blendConstants);
}

void GfrContext::PreCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

void GfrContext::PostCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

void GfrContext::PreCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

void GfrContext::PostCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

void GfrContext::PreCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

void GfrContext::PostCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

void GfrContext::PreCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetStencilReference(commandBuffer, faceMask, reference);
}

void GfrContext::PostCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetStencilReference(commandBuffer, faceMask, reference);
}

void GfrContext::PreCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBeginQuery(commandBuffer, queryPool, query, flags);
}

void GfrContext::PostCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBeginQuery(commandBuffer, queryPool, query, flags);
}

void GfrContext::PreCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdEndQuery(commandBuffer, queryPool, query);
}

void GfrContext::PostCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdEndQuery(commandBuffer, queryPool, query);
}

void GfrContext::PreCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

void GfrContext::PostCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

void GfrContext::PreCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

void GfrContext::PostCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

void GfrContext::PreCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

void GfrContext::PostCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

void GfrContext::PreCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

void GfrContext::PostCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

void GfrContext::PreCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdNextSubpass(commandBuffer, contents);
}

void GfrContext::PostCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdNextSubpass(commandBuffer, contents);
}

void GfrContext::PreCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdEndRenderPass(commandBuffer);
}

void GfrContext::PostCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdEndRenderPass(commandBuffer);
}

void GfrContext::PreCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetEvent(commandBuffer, event, stageMask);
}

void GfrContext::PostCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetEvent(commandBuffer, event, stageMask);
}

void GfrContext::PreCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdResetEvent(commandBuffer, event, stageMask);
}

void GfrContext::PostCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdResetEvent(commandBuffer, event, stageMask);
}

void GfrContext::PreCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void GfrContext::PostCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void GfrContext::PreCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void GfrContext::PostCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void GfrContext::PreCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}

void GfrContext::PostCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}

void GfrContext::PreCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PostCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PreCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PostCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PreCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBeginConditionalRenderingEXT(commandBuffer, pConditinalRenderingBegin);
}

void GfrContext::PostCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBeginConditionalRenderingEXT(commandBuffer, pConditinalRenderingBegin);
}

void GfrContext::PreCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdEndConditionalRenderingEXT(commandBuffer);
}

void GfrContext::PostCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdEndConditionalRenderingEXT(commandBuffer);
}

void GfrContext::PreCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
}

void GfrContext::PostCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
}

void GfrContext::PreCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDebugMarkerEndEXT(commandBuffer);
}

void GfrContext::PostCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDebugMarkerEndEXT(commandBuffer);
}

void GfrContext::PreCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
}

void GfrContext::PostCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
}

void GfrContext::PreCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void GfrContext::PostCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void GfrContext::PreCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdEndDebugUtilsLabelEXT(commandBuffer);
}

void GfrContext::PostCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdEndDebugUtilsLabelEXT(commandBuffer);
}

void GfrContext::PreCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void GfrContext::PostCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void GfrContext::PreCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
}

void GfrContext::PostCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
}

void GfrContext::PreCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdSetDeviceMask(commandBuffer, deviceMask);
}

void GfrContext::PostCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdSetDeviceMask(commandBuffer, deviceMask);
}

void GfrContext::PreCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PostCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PreCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PostCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

void GfrContext::PreCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PostCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PreCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PreCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}

void GfrContext::PostCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  gfr::GetGfrCommandBuffer(commandBuffer)->PostCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
}
// clang-format on